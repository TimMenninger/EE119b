-- Need the instruction and 2 operands.  If operand is N/A, put 0
LDI 16 123
MOV 17 16 -- Test move instruction to/from every register.  This will just
MOV 18 17 -- propagate 123 through all of the registers.
MOV 19 18
MOV 20 19
MOV 21 20
MOV 22 21
MOV 23 22
MOV 24 23
MOV 25 24
MOV 26 25
MOV 27 26
MOV 28 27
MOV 29 28
MOV 30 29
MOV 31 30
MOV 0 31
MOV 1 0
MOV 2 1
MOV 3 2
MOV 4 3
MOV 5 4
MOV 6 5
MOV 7 6
MOV 8 7
MOV 9 8
MOV 10 9
MOV 11 10
MOV 12 11
MOV 13 12
MOV 14 13
MOV 15 14
MOV 16 15

PUSH 0 0 -- Push what is in registers to see if we successfully loaded
PUSH 1 0
PUSH 2 0
PUSH 3 0
PUSH 4 0
PUSH 5 0
PUSH 6 0
PUSH 7 0
PUSH 8 0
PUSH 9 0
PUSH 10 0
PUSH 11 0
PUSH 12 0
PUSH 13 0
PUSH 14 0
PUSH 15 0
PUSH 16 0
PUSH 17 0
PUSH 18 0
PUSH 19 0
PUSH 20 0
PUSH 21 0
PUSH 22 0
PUSH 23 0
PUSH 24 0
PUSH 25 0
PUSH 26 0
PUSH 27 0
PUSH 28 0
PUSH 29 0
PUSH 30 0
PUSH 31 0

LDI 16 10 -- Load something into each of the 16 registers (takes 4 input bits)
LDI 17 55
LDI 18 123
LDI 19 224
LDI 20 91
LDI 21 90
LDI 22 0
LDI 23 255
LDI 24 254
LDI 25 66
LDI 26 78
LDI 27 211
LDI 28 198
LDI 29 176
LDI 30 22
LDI 31 45

PUSH 16 0 -- Push what is in registers to see if we successfully loaded
PUSH 17 0
PUSH 18 0
PUSH 19 0
PUSH 20 0
PUSH 21 0
PUSH 22 0
PUSH 23 0
PUSH 24 0
PUSH 25 0
PUSH 26 0
PUSH 27 0
PUSH 28 0
PUSH 29 0
PUSH 30 0
PUSH 31 0

POP 0 0 -- Move values into upper 15 registers
POP 1 0
POP 2 0
POP 3 0
POP 4 0
POP 5 0
POP 6 0
POP 7 0
POP 8 0
POP 9 0
POP 10 0
POP 11 0
POP 12 0
POP 13 0
POP 14 0
POP 15 0

STX 1 0 -- Test moving value from register to address at X and back.  Address at X
LDX 0 0 -- is arbitrary.  Test this on all 30 registers.  We store and load from
STX 2 0 -- different regs to show that loading changes the register value
LDX 1 0
STX 3 0
LDX 2 0
STX 4 0
LDX 3 0
STX 5 0
LDX 4 0
STX 6 0
LDX 5 0
STX 7 0
LDX 6 0
STX 8 0
LDX 7 0
STX 9 0
LDX 8 0
STX 10 0
LDX 9 0
STX 11 0
LDX 10 0
STX 12 0
LDX 11 0
STX 13 0
LDX 12 0
STX 14 0
LDX 13 0
STX 15 0
LDX 14 0
STX 16 0
LDX 15 0
STX 17 0
LDX 16 0
STX 18 0
LDX 17 0
STX 19 0
LDX 18 0
STX 20 0
LDX 19 0
STX 21 0
LDX 20 0
STX 22 0
LDX 21 0
STX 23 0
LDX 22 0
STX 24 0
LDX 23 0
STX 25 0
LDX 24 0
STX 26 0
LDX 25 0
STX 27 0
LDX 26 0
STX 28 0
LDX 27 0
STX 29 0
LDX 28 0
STX 30 0
LDX 29 0
STX 31 0
LDX 30 0
STX 0 0
LDX 31 0

LDI 26 245 -- We don't test values with wraparound all the way because that is
LDI 27 200 -- where the stack is, but we want to make sure it propagates to high byte

STXI 0 0 -- Now test post increment store X on all registers except X
STXI 1 0
STXI 2 0
STXI 3 0
STXI 4 0
STXI 5 0
STXI 6 0
STXI 7 0
STXI 8 0
STXI 9 0
STXI 10 0
STXI 11 0
STXI 12 0
STXI 13 0
STXI 14 0
STXI 15 0
STXI 16 0
STXI 17 0
STXI 18 0
STXI 19 0
STXI 20 0
STXI 21 0
STXI 22 0
STXI 23 0
STXI 24 0
STXI 25 0
STXI 28 0 -- skip the X registers
STXI 29 0
STXI 30 0
STXI 31 0

LDXD 1 0 -- Now test pre decrement load X on all registers except X.  Push in a staggered
LDXD 2 0 -- order to demonstrate that LD changes registers
LDXD 3 0
LDXD 4 0
LDXD 5 0
LDXD 6 0
LDXD 7 0
LDXD 8 0
LDXD 9 0
LDXD 10 0
LDXD 11 0
LDXD 12 0
LDXD 13 0
LDXD 14 0
LDXD 15 0
LDXD 16 0
LDXD 17 0
LDXD 18 0
STX 22 0 -- Demonstrate a store and load with a different value for X than before
LDX 21 0
LDXD 19 0
LDXD 20 0
LDXD 21 0
LDXD 22 0
LDXD 23 0
LDXD 24 0
LDXD 25 0
LDXD 28 0 -- skip the X registers
LDXD 29 0
LDXD 30 0
LDXD 31 0
LDXD 0 0

STXD 0 0 -- Now test pre decrement store X on all registers (except X)
STXD 1 0 -- This should wrap again and have reg 27 decrement.
STXD 2 0
STXD 3 0
STXD 4 0
STXD 5 0
STXD 6 0
STXD 7 0
STXD 8 0
STXD 9 0
STXD 10 0
STXD 11 0
STXD 12 0
STXD 13 0
STXD 14 0
STXD 15 0
STXD 16 0
STXD 17 0
STXD 18 0
STXD 19 0
STXD 20 0
STXD 21 0
STXD 22 0
STXD 23 0
STXD 24 0
STXD 25 0
STXD 28 0 -- Skip X registers
STXD 29 0
STXD 30 0
STXD 31 0

LDXI 1 0 -- Now test post increment load X on all registers except X.  LD in staggered
LDXI 2 0 -- order to show regs change
LDXI 3 0
LDXI 4 0
LDXI 5 0
LDXI 6 0
LDXI 7 0
LDXI 8 0
LDXI 9 0
LDXI 10 0
LDXI 11 0
LDXI 12 0
LDXI 13 0
LDXI 14 0
LDXI 15 0
LDXI 16 0
LDXI 17 0
LDXI 18 0
LDXI 19 0
LDXI 20 0
LDXI 21 0
LDXI 22 0
LDXI 23 0
LDXI 24 0
LDXI 25 0
LDXI 28 0 -- skip the X registers
LDXI 29 0
LDXI 30 0
LDXI 31 0
LDXI 0 0

STY 1 0 -- Test moving value from register to address at Y and back.  Address at Y
LDY 0 0 -- is arbitrary.  Test this on all 30 registers.  We store and load from
STY 2 0 -- different regs to show that loading changes the register value
LDY 1 0
STY 3 0
LDY 2 0
STY 4 0
LDY 3 0
STY 5 0
LDY 4 0
STY 6 0
LDY 5 0
STY 7 0
LDY 6 0
STY 8 0
LDY 7 0
STY 9 0
LDY 8 0
STY 10 0
LDY 9 0
STY 11 0
LDY 10 0
STY 12 0
LDY 11 0
STY 13 0
LDY 12 0
STY 14 0
LDY 13 0
STY 15 0
LDY 14 0
STY 16 0
LDY 15 0
STY 17 0
LDY 16 0
STY 18 0
LDY 17 0
STY 19 0
LDY 18 0
STY 20 0
LDY 19 0
STY 21 0
LDY 20 0
STY 22 0
LDY 21 0
STY 23 0
LDY 22 0
STY 24 0
LDY 23 0
STY 25 0
LDY 24 0
STY 26 0
LDY 25 0
STY 27 0
LDY 26 0
STY 28 0
LDY 27 0
STY 29 0
LDY 28 0
STY 30 0
LDY 29 0
STY 31 0
LDY 30 0
STY 0 0
LDY 31 0

LDI 28 245 -- Show that it wraps from $ffff to $0000
LDI 29 255

STYI 0 0 -- Now test post increment store Y on all registers except Y
STYI 1 0
STYI 2 0
STYI 3 0
STYI 4 0
STYI 5 0
STYI 6 0
STYI 7 0
STYI 8 0
STYI 9 0
STYI 10 0
STYI 11 0
STYI 12 0
STYI 13 0
STYI 14 0
STYI 15 0
STYI 16 0
STYI 17 0
STYI 18 0
STYI 19 0
STYI 20 0
STYI 21 0
STYI 22 0
STYI 23 0
STYI 24 0
STYI 25 0
STYI 26 0
STYI 27 0
STYI 30 0 -- skip the Y registers
STYI 31 0

LDYD 1 0 -- Now test pre decrement load Y on all registers except Y.  LD in staggered
LDYD 2 0 -- to show regs change
LDYD 3 0
LDYD 4 0
LDYD 5 0
LDYD 6 0
LDYD 7 0
LDYD 8 0
LDYD 9 0
LDYD 10 0
LDYD 11 0
LDYD 12 0
LDYD 13 0
LDYD 14 0
LDYD 15 0
LDYD 16 0
LDYD 17 0
LDYD 18 0
LDYD 19 0
LDYD 20 0
LDYD 21 0
LDYD 22 0
LDYD 23 0
LDYD 24 0
LDYD 25 0
LDYD 26 0
LDYD 27 0
LDYD 30 0 -- skip the Y registers
LDYD 31 0
LDYD 0 0

STYD 0 0 -- Now test pre decrement store Y on all registers (except Y)
STYD 1 0 -- This should wrap again and have reg 27 decrement.
STYD 2 0
STYD 3 0
STYD 4 0
STYD 5 0
STYD 6 0
STYD 7 0
STYD 8 0
STYD 9 0
STYD 10 0
STYD 11 0
STYD 12 0
STYD 13 0
STYD 14 0
STYD 15 0
STY 22 0 -- Demonstrate a store and load with a different value for Y than before
LDY 21 0
STYD 16 0
STYD 17 0
STYD 18 0
STYD 19 0
STYD 20 0
STYD 21 0
STYD 22 0
STYD 23 0
STYD 24 0
STYD 25 0
STYD 26 0
STYD 27 0
STYD 30 0 -- Skip Y registers
STYD 31 0

LDYI 1 0 -- Now test post increment load Y on all registers except Y.  LD in staggered
LDYI 2 0 -- order to show regs change
LDYI 3 0
LDYI 4 0
LDYI 5 0
LDYI 6 0
LDYI 7 0
LDYI 8 0
LDYI 9 0
LDYI 10 0
LDYI 11 0
LDYI 12 0
LDYI 13 0
LDYI 14 0
LDYI 15 0
LDYI 16 0
LDYI 17 0
LDYI 18 0
LDYI 19 0
LDYI 20 0
LDYI 21 0
LDYI 22 0
LDYI 23 0
LDYI 24 0
LDYI 25 0
LDYI 26 0
LDYI 27 0
LDYI 30 0 -- skip the Y registers
LDYI 31 0
LDYI 0 0

STZ 1 0 -- Test moving value from register to address at Z and back.  Address at Z
LDZ 0 0 -- is arbitrary.  Test this on all 30 registers.  We store and load from
STZ 2 0 -- different regs to show that loading changes the register value
LDZ 1 0
STZ 3 0
LDZ 2 0
STZ 4 0
LDZ 3 0
STZ 5 0
LDZ 4 0
STZ 6 0
LDZ 5 0
STZ 7 0
LDZ 6 0
STZ 8 0
LDZ 7 0
STZ 9 0
LDZ 8 0
STZ 10 0
LDZ 9 0
STZ 11 0
LDZ 10 0
STZ 12 0
LDZ 11 0
STZ 13 0
LDZ 12 0
STZ 14 0
LDZ 13 0
STZ 15 0
LDZ 14 0
STZ 16 0
LDZ 15 0
STZ 17 0
LDZ 16 0
STZ 18 0
LDZ 17 0
STZ 19 0
LDZ 18 0
STZ 20 0
LDZ 19 0
STZ 21 0
LDZ 20 0
STZ 22 0
LDZ 21 0
STZ 23 0
LDZ 22 0
STZ 24 0
LDZ 23 0
STZ 25 0
LDZ 24 0
STZ 26 0
LDZ 25 0
STZ 27 0
LDZ 26 0
STZ 28 0
LDZ 27 0
STZ 29 0
LDZ 28 0
STZ 30 0
LDZ 29 0
STZ 31 0
LDZ 30 0
STZ 0 0
LDZ 31 0

LDI 30 250 -- We don't test values with wraparound all the way because that is
LDI 31 0 -- where the stack is, but we want to make sure it propagates to high byte

STZI 0 0 -- Now test post increment store Z on all registers except Z
STZI 1 0
STZI 2 0
STZI 3 0
STZI 4 0
STZI 5 0
STZI 6 0
STZI 7 0
STZI 8 0
STZI 9 0
STZI 10 0
STZI 11 0
STZI 12 0
STZI 13 0
STZI 14 0
STZI 15 0
STZ 22 0 -- Demonstrate a store and load with a different value for Z than before
LDZ 21 0
STZI 16 0
STZI 17 0
STZI 18 0
STZI 19 0
STZI 20 0
STZI 21 0
STZI 22 0
STZI 23 0
STZI 24 0
STZI 25 0
STZI 26 0
STZI 27 0
STZI 28 0
STZI 29 0 -- skip the Z registers

LDZD 1 0 -- Now test pre decrement load Z on all registers except Z.  LD in staggered
LDZD 2 0 -- order to show regs change
LDZD 3 0
LDZD 4 0
LDZD 5 0
LDZD 6 0
LDZD 7 0
LDZD 8 0
LDZD 9 0
LDZD 10 0
LDZD 11 0
LDZD 12 0
LDZD 13 0
LDZD 14 0
LDZD 15 0
LDZD 16 0
LDZD 17 0
LDZD 18 0
LDZD 19 0
LDZD 20 0
LDZD 21 0
LDZD 22 0
LDZD 23 0
LDZD 24 0
LDZD 25 0
LDZD 26 0
LDZD 27 0
LDZD 28 0
LDZD 29 0 -- skip the Z registers
LDZD 0 0

STZD 0 0 -- Now test pre decrement store Z on all registers (except Z)
STZD 1 0 -- This should wrap again and have reg 27 decrement.
STZD 2 0
STZD 3 0
STZD 4 0
STZD 5 0
STZD 6 0
STZD 7 0
STZD 8 0
STZD 9 0
STZD 10 0
STZD 11 0
STZD 12 0
STZD 13 0
STZD 14 0
STZD 15 0
STZD 16 0
STZD 17 0
STZD 18 0
STZD 19 0
STZD 20 0
STZD 21 0
STZD 22 0
STZD 23 0
STZD 24 0
STZD 25 0
STZD 26 0
STZD 27 0
STZD 28 0
STZD 29 0 -- Skip Z registers

LDZI 1 0 -- Now test post increment load Z on all registers except Z.  LD in staggered
LDZI 2 0 -- order to show regs change
LDZI 3 0
LDZI 4 0
LDZI 5 0
LDZI 6 0
LDZI 7 0
LDZI 8 0
LDZI 9 0
LDZI 10 0
LDZI 11 0
LDZI 12 0
LDZI 13 0
LDZI 14 0
LDZI 15 0
LDZI 16 0
LDZI 17 0
LDZI 18 0
LDZI 19 0
LDZI 20 0
LDZI 21 0
LDZI 22 0
LDZI 23 0
LDZI 24 0
LDZI 25 0
LDZI 26 0
LDZI 27 0
LDZI 28 0
LDZI 29 0 -- skip the Z registers
LDZI 0 0

LDI 28 245 -- We don't test values with wraparound all the way because that is
LDI 29 200 -- where the stack is, but we want to make sure it propagates to high byte

STDY 0 0 -- First operand is destination, second is q (5 bits)
STDY 0 1 -- We will try every possible q, with each register twice except Y
STDY 1 2 -- We are doing stores first so we know what to expect when reading
STDY 1 3
STDY 2 4
STDY 2 5
STDY 3 6
STDY 3 7
STDY 4 8
STDY 4 9
STDY 5 10
STDY 5 11
STDY 6 12
STDY 6 13
STDY 7 14
STDY 7 15
STDY 8 16
STDY 8 17
STDY 9 18
STDY 9 19
STDY 10 20
STDY 10 21
STDY 11 22
STDY 11 23
STDY 12 24
STDY 12 25
STDY 13 26
STDY 13 27
STDY 14 28
STDY 14 29
STDY 15 30
STDY 15 31
STDY 16 32
STDY 16 33
STDY 17 34
STDY 17 35
STDY 18 36
STDY 18 37
STDY 19 38
STDY 19 39
STDY 20 40
STDY 20 41
STDY 21 42
STDY 21 43
STDY 22 44
STDY 22 45
STDY 23 46
STDY 23 47
STDY 24 48
STDY 24 49
STDY 25 50
STDY 25 51
STDY 26 52
STDY 26 53
STDY 27 54
STDY 27 55
STDY 30 56 -- Skip Y registers
STDY 30 57
STDY 31 58
STDY 31 59
STDY 0 60
STDY 0 61
STDY 1 62
STDY 1 63

LDDY 1 0 -- First operand is destination, second is q (5 bits)
LDDY 2 1 -- We will try every possible q, with each register twice except Y
LDDY 3 2 -- From before, Y will have to wrap around.  We load in a different order
LDDY 4 3 -- To show that registers change
LDDY 5 4
LDDY 6 5
LDDY 7 6
LDDY 8 7
LDDY 9 8
LDDY 10 9
LDDY 11 10
LDDY 12 11
LDDY 13 12
LDDY 14 13
LDDY 15 14
LDDY 16 15
LDDY 17 16
LDDY 18 17
LDDY 19 18
LDDY 20 19
LDDY 21 20
LDDY 22 21
LDDY 23 22
LDDY 24 23
LDDY 25 24
LDDY 26 25
LDDY 27 26
LDDY 30 27
LDDY 31 28
LDDY 0 29
LDDY 1 30
LDDY 2 31
LDDY 3 32
LDDY 4 33
LDDY 5 34
LDDY 6 35
LDDY 7 36
LDDY 8 37
LDDY 9 38
LDDY 10 39
LDDY 11 40
LDDY 12 41
LDDY 13 42
LDDY 14 43
LDDY 15 44
LDDY 16 45
LDDY 17 46
LDDY 18 47
LDDY 19 48
LDDY 20 49
LDDY 21 50
LDDY 22 51
LDDY 23 52
LDDY 24 53
LDDY 25 54
LDDY 26 55
LDDY 27 56 -- Skip Y registers
LDDY 30 57
LDDY 31 58
LDDY 0 59
LDDY 1 60
LDDY 2 61
LDDY 3 62
LDDY 4 63

LDI 30 245 -- We don't test values with wraparound all the way because that is
LDI 31 200 -- where the stack is, but we want to make sure it propagates to high byte

STDZ 0 0 -- First operand is destination, second is q (5 bits)
STDZ 0 1 -- We will try every possible q, with each register twice except Z
STDZ 1 2 -- We are doing stores first so we know what to expect when reading
STDZ 1 3
STDZ 2 4
STDZ 2 5
STDZ 3 6
STDZ 3 7
STDZ 4 8
STDZ 4 9
STDZ 5 10
STDZ 5 11
STDZ 6 12
STDZ 6 13
STDZ 7 14
STDZ 7 15
STDZ 8 16
STDZ 8 17
STDZ 9 18
STDZ 9 19
STDZ 10 20
STDZ 10 21
STDZ 11 22
STDZ 11 23
STDZ 12 24
STDZ 12 25
STDZ 13 26
STDZ 13 27
STDZ 14 28
STDZ 14 29
STDZ 15 30
STDZ 15 31
STDZ 16 32
STDZ 16 33
STDZ 17 34
STDZ 17 35
STDZ 18 36
STDZ 18 37
STDZ 19 38
STDZ 19 39
STDZ 20 40
STDZ 20 41
STDZ 21 42
STDZ 21 43
STDZ 22 44
STDZ 22 45
STDZ 23 46
STDZ 23 47
STDZ 24 48
STDZ 24 49
STDZ 25 50
STDZ 25 51
STDZ 26 52
STDZ 26 53
STDZ 27 54
STDZ 27 55
STDZ 28 56
STDZ 28 57
STDZ 29 58
STDZ 29 59 -- Skip Z registers
STDZ 0 60
STDZ 0 61
STDZ 1 62
STDZ 1 63

LDDZ 1 0 -- First operand is destination, second is q (5 bits)
LDDZ 2 1 -- We will try every possible q, with each register twice except Z
LDDZ 3 2 -- From before, Z will have to wrap around.  Load in different order
LDDZ 4 3 -- to show it changes regs
LDDZ 5 4
LDDZ 6 5
LDDZ 7 6
LDDZ 8 7
LDDZ 9 8
LDDZ 10 9
LDDZ 11 10
LDDZ 12 11
LDDZ 13 12
LDDZ 14 13
LDDZ 15 14
LDDZ 16 15
LDDZ 17 16
LDDZ 18 17
LDDZ 19 18
LDDZ 20 19
LDDZ 21 20
LDDZ 22 21
LDDZ 23 22
LDDZ 24 23
LDDZ 25 24
LDDZ 26 25
LDDZ 27 26
LDDZ 28 27
LDDZ 29 28
LDDZ 0 29
LDDZ 1 30
LDDZ 2 31
LDDZ 3 32
LDDZ 4 33
LDDZ 5 34
LDDZ 6 35
LDDZ 7 36
LDDZ 8 37
LDDZ 9 38
LDDZ 10 39
LDDZ 11 40
LDDZ 12 41
LDDZ 13 42
LDDZ 14 43
LDDZ 15 44
LDDZ 16 45
LDDZ 17 46
LDDZ 18 47
LDDZ 19 48
LDDZ 20 49
LDDZ 21 50
LDDZ 22 51
LDDZ 23 52
LDDZ 24 53
LDDZ 25 54
LDDZ 26 55
LDDZ 27 56
LDDZ 28 57
LDDZ 29 58 -- skip Z registers
LDDZ 0 59
LDDZ 1 60
LDDZ 2 61
LDDZ 3 62
LDDZ 4 63

STS 0 0 -- Store register 0 to memory.  The memory address will be random
STS 1 0
STS 2 0
STS 3 0
STS 4 0
STS 5 0
STS 6 0
STS 7 0
STS 8 0
STS 9 0
STS 10 0
STS 11 0
STS 12 0
STS 13 0
STS 14 0
STS 15 0
STS 16 0
STS 17 0
STS 18 0
STS 19 0
STS 20 0
STS 21 0
STS 22 0
STS 23 0
STS 24 0
STS 25 0
STS 26 0
STS 27 0
STS 28 0
STS 29 0
STS 30 0
STS 31 0

LDS 1 0 -- Load what we just stored.  This will be in a random order from the
LDS 2 0 -- Python code, but just to ensure, we will load in a different order
LDS 3 0 -- to show regs change
LDS 4 0
LDS 5 0
LDS 6 0
LDS 7 0
LDS 8 0
LDS 9 0
LDS 10 0
LDS 11 0
LDS 12 0
LDS 13 0
LDS 14 0
LDS 15 0
LDS 16 0
LDS 17 0
LDS 18 0
LDS 19 0
LDS 20 0
LDS 21 0
LDS 22 0
LDS 23 0
LDS 24 0
LDS 25 0
LDS 26 0
LDS 27 0
LDS 28 0
LDS 29 0
LDS 30 0
LDS 31 0
LDS 0 0
